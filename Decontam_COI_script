################################################################
# DECONTAM COI - DNA metabarcoding processing
################################################################
# Paige Smallman, 2025

# this script removes contaminants, control and outlier samples

# decontam package provides statistical methods to identify, visualize, and remove contamination
# this script uses the prevalence method - relies on controls + compares the prevalence of sequences in the samples vs. controls
# if prevalence of a sequence is higher in control = contaminant

run_COI_decontamination <- function(
    physeq_path,
    output_dir,
    project_id,
    control_col = "sample_type",
    neg_controls = c("extraction control", "field control", "pcr control"),
    min_reads = 1000,
    prevalence_threshold = 0.1,
    max_n_ratio = 0.005,       # Stricter N filter for protein-coding
    frame_shift_check = TRUE,  # Check for pseudogenes
    seed = 123) {
  
  suppressPackageStartupMessages({
    require(phyloseq)
    require(decontam)
    require(ggplot2)
    require(Biostrings)
    require(tidyverse)
  })
  
# Create output directory
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
  
# DATA LOADING & VALIDATION

message("\nLoading phyloseq object...")
ps <- readRDS(physeq_path)
  
# Validate sequences exist
  if(is.null(refseq(ps))) {
    stop("Phyloseq object requires refseq() containing DNA sequences")
  }
  

# PRE-FILTERING FOR COI CHARACTERISTICS

message("\nApplying COI-specific pre-filters...")
  
# 1. Length filtering (remove extreme lengths)
seq_lengths <- width(refseq(ps))
length_cutoff <- quantile(seq_lengths, c(0.01, 0.99))
keep_length <- seq_lengths >= length_cutoff[1] & seq_lengths <= length_cutoff[2]
  
# 2. N-content filtering
n_content <- letterFrequency(refseq(ps), "N", as.prob=TRUE)
keep_n <- n_content <= max_n_ratio
  
# 3. Frame shift detection (requires alignment - simplified example)
  if(frame_shift_check) {
    # In practice: Align to reference COI and check indels
    # Here we use simple length modulo 3 check
    keep_frame <- width(refseq(ps)) %% 3 == 0
  } else {
    keep_frame <- rep(TRUE, ntaxa(ps))
  }
  
# Apply all filters
ps <- prune_taxa(keep_length & keep_n & keep_frame, ps)
  
# CONTAMINANT IDENTIFICATION (SIMILAR TO 12S BUT MORE STRICT)

message("\nIdentifying contaminants with COI-specific parameters...")
  
# Mark negative controls
sample_data(ps)$is_neg <- sample_data(ps)[[control_col]] %in% neg_controls
sample_data(ps)$lib_size <- sample_sums(ps)
  
# Use combined prevalence/frequency method for COI
  contam_df <- isContaminant(
    ps,
    method = "combined",
    neg = "is_neg",
    threshold = 0.3,  # More conservative threshold
    normalize = TRUE,
    batch = NULL,
    frequency = TRUE
  )
  
# NUMT-SPECIFIC FILTERING
  
message("\nApplying NUMT detection heuristics...")
  
# 1. Sequence composition analysis
gc_content <- letterFrequency(refseq(ps), "GC", as.prob=TRUE)[,1]
gc_outliers <- gc_content < quantile(gc_content, 0.01) | gc_content > quantile(gc_content, 0.99)
  
# 2. Stop codon check (requires translation)
dna <- refseq(ps)
aa <- translate(dna, if.fuzzy.codon="solve")
has_stop <- vapply(aa, function(x) any(x == "*"), logical(1))
  
# 3. Evolutionary distance filtering (placeholder)
# In practice: Align to reference database and compute distances
  
# Combine NUMT indicators
numt_candidates <- gc_outliers | has_stop
  
# Mark contaminants and NUMTs
contam_df$numt <- numt_candidates
contam_df$contaminant <- contam_df$contaminant | numt_candidates

# VISUALIZATION & DIAGNOSTICS

message("\nGenerating COI-specific diagnostic plots...")
  
# NUMT diagnostic plot
  numt_plot <- ggplot(data.frame(gc_content, has_stop), 
                      aes(x=gc_content, fill=has_stop)) +
    geom_histogram(bins=30) +
    labs(x="GC Content", y="Count", title="NUMT Detection") +
    theme_minimal()
  
ggsave(file.path(output_dir, "numt_detection.png"), numt_plot, width=8, height=6)
  
# DECONTAMINATION & FILTERING
 
message("\nRemoving contaminants and NUMTs...")
  
# Remove contaminants and NUMTs
ps_clean <- prune_taxa(!contam_df$contaminant, ps)
  
# Additional COI-specific filters
  ps_clean <- ps_clean %>%
    subset_samples(lib_size >= min_reads) %>%
    prune_taxa(taxa_sums(.) > 0, .)
  
# OUTPUT GENERATION

output_path <- file.path(output_dir, paste0(project_id, "_COI_clean.rds"))
saveRDS(ps_clean, output_path)
  
# Save contaminant sequences with metadata
  contam_data <- data.frame(
    sequence = refseq(ps)[contam_df$contaminant],
    reason = ifelse(contam_df$numt, "NUMT", "Contaminant"),
    p_value = contam_df$p
  )
write.csv(contam_data, file.path(output_dir, "coi_contaminants.csv"))
  
  return(list(
    phyloseq_clean = ps_clean,
    output_path = output_path,
    contaminants = contam_df,
    numt_stats = table(numt_candidates),
    filtered_sequences = ntaxa(ps) - ntaxa(ps_clean)
  ))
}

# Helper function to translate DNA
translate <- function(dna, ...) {
  sapply(as.character(dna), function(x) {
    tryCatch(
      Biostrings::translate(DNAString(x), ...),
      error = function(e) AAString("")
    )
  })
}
